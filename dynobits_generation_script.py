# Built with python 3, dependencies installed with pip 
# library to generate images - Pillow 
# https://pillow.readthedocs.io/en/stable/installation.html
from PIL import Image

# library to work with arrays 
# https://numpy.org/
import numpy as np

# library to interact with the operating system
import os

# library to generate random integer values
from random import seed
from random import randint

# Get current working directory - used to write images to
cwd = os.getcwd()

# sets final image dimensions as 480x480 pixels
# the original 24x24 pixel image will be expanded to these dimensions
dimensions = 480, 480

# COUNTS FOR TRACKING RESULTS
count_al_color = [0, 0, 0, 0, 0] # Grey, Gold, Red, White, Black
count_dyno_type = [0, 0, 0] # Euoplocephalus, T-Tex, Euoplorex
count_emotion = [0, 0, 0] # mad, happy, neutral
count_nocturnal = 0
count_eye_mutation = 0
count_mismatch_spikes = 0
count_mismatch_dots = 0


def feed_dyno():
    '''Progress seed by random int - the more you feed your dyno, the more random it becomes'''
    n = randint(0, 999)
    seed(n)
    return n


def random_color():
    '''generates random color rgb between (0, 0, 0) and (255, 255, 255) inclusive'''
    feed_dyno()
    return (randint(0, 255), randint(0, 255), randint(0, 255))


def lighter(color):
    '''makes a color 25% lighter - assumes color generated by random_color()'''
    color = np.array(color)
    white = np.array([255, 255, 255])
    vector = white-color
    return tuple(color + vector * 0.25) # 25% lighter


dyno_count = 1000 # number of dynos to create
for dyno_number in range(dyno_count):

    is_nocturnal = feed_dyno() % 2 # 50% chance dyno is nocturnal (night-mode)
    has_eye_mutation = feed_dyno() < 100 # 10% chance of eye mutation
    has_mismatch_spikes = feed_dyno() < 150 # 15% chance of mismatch spikes
    has_mismatch_dots = feed_dyno() < 150 # 15% chance of mismatch dots

    # using ETH block number as starting random number seed
    b = 11981207
    seed(b + dyno_number)

    # Background color
    bg = (238, 238, 238)

    # Outline color
    ol = (0, 0, 0)

    if is_nocturnal: 
        bg,ol = ol,bg
        count_nocturnal += 1

    # Eyebrow
    eb = (0, 0, 0)

    # Skin color
    sk = random_color()

    # Horn color
    hn = random_color()

    '''----- ARMS & LEGS -----'''
    # TODO: higher chance of black/white so there are more of them
    al_type = feed_dyno()

    if al_type > 500:
        # 50% chance of grey arms and legs
        al = (152, 152, 152)
        count_al_color[0] += 1
    elif al_type > 50:
        # 45% chance of gold arms and legs
        al = (204, 172, 0)
        count_al_color[1] += 1
    elif al_type > 10:
        # 4% chance of red arms and legs
        al = (204, 0, 0)
        count_al_color[2] += 1
    else:
        # 1% chance of black/white arms and legs
        al = ol
        if is_nocturnal: # White arms if nocturnal
            count_al_color[3] += 1
        else: # Black arms if diurnal
            count_al_color[4] += 1
    
    '''----- EYES -----'''
    if has_eye_mutation:
        # Sclera color - the "white" part of eye
        sc = random_color()
        # Pupil color - the black part of eye
        pu = (154, 0, 0)
        count_eye_mutation += 1
    else: 
        sc = (240,248,255)
        pu = (0, 0, 0)

    '''----- SPIKES & TAIL -----'''
    if has_mismatch_spikes: # 4 total spikes & 1 tail
        s1 = random_color()
        s2 = random_color()
        s3 = random_color()
        s4 = random_color()
        tl = random_color()
    else: 
        s1 = s2 = s3 = s4 = tl = random_color()

    '''----- DOTS -----'''
    if has_mismatch_dots: # 5 total with inner and outer
        i1 = random_color()
        o1 = lighter(i1)
        i2 = random_color()
        o2 = lighter(i2)
        i3 = random_color()
        o3 = lighter(i3)
        i4 = random_color()
        o4 = lighter(i4)
        i5 = random_color()
        o5 = lighter(i5)
    else: 
        i1 = i2 = i3 = i4 = i5 = random_color()
        o1 = o2 = o3 = o4 = o5 = lighter(i1)


    # Define pixel arrays for each dyno body
    euoplocephalus = np.array([
        [bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, bg, hn, bg, bg, bg, hn, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, ol, ol, ol, ol, ol, hn, hn, ol, ol, ol, bg, bg, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, ol, ol, sk, sk, sk, sk, sk, hn, hn, sk, sk, sk, ol, bg, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, ol, sk, sk, sk, sk, sk, sk, sk, hn, hn, hn, sk, sk, sk, ol, s1, bg, bg, bg, bg, bg, bg],
        [bg, bg, ol, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, ol, s1, s1, bg, bg, bg, bg, bg],
        [bg, bg, ol, sk, sk, sk, sc, sc, sk, sk, sk, sk, sk, sk, sk, sk, ol, s1, bg, bg, bg, bg, bg, bg],
        [bg, bg, ol, sk, sk, sk, pu, sc, sk, sk, sk, sk, sk, sk, sk, sk, ol, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, ol, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, ol, s2, bg, bg, bg, bg, bg, bg],
        [bg, bg, ol, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, ol, s2, s2, bg, bg, bg, bg, bg],
        [bg, bg, ol, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, ol, s2, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, ol, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, ol, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, ol, ol, ol, ol, sk, sk, sk, sk, sk, sk, sk, sk, ol, s3, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, bg, ol, sk, sk, sk, sk, sk, sk, sk, sk, sk, ol, s3, s3, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, al, al, ol, sk, sk, sk, al, al, al, sk, sk, sk, ol, s3, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, al, bg, ol, sk, sk, sk, al, sk, sk, sk, sk, sk, ol, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, bg, ol, sk, sk, sk, sk, sk, sk, sk, sk, sk, ol, s4, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, bg, ol, sk, sk, sk, sk, sk, sk, sk, sk, sk, ol, s4, s4, bg, tl, tl, bg, bg],
        [bg, bg, bg, bg, bg, bg, ol, sk, sk, sk, sk, sk, sk, sk, sk, sk, ol, s4, bg, bg, tl, tl, bg, bg],
        [bg, bg, bg, bg, bg, bg, ol, sk, sk, sk, sk, sk, sk, sk, sk, sk, ol, bg, bg, tl, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, bg, ol, ol, ol, ol, ol, ol, al, al, ol, ol, ol, tl, tl, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, bg, al, al, bg, bg, bg, bg, al, al, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, al, al, al, bg, bg, bg, al, al, al, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg]
    ], dtype=np.uint8)

    trex = np.array([
        [bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, bg, bg, ol, ol, ol, ol, ol, ol, ol, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, ol, ol, sk, sk, sk, sk, o1, i1, i1, ol, bg, bg, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, ol, ol, sk, sk, sk, sk, sk, sk, sk, o1, o1, o1, ol, bg, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, ol, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, ol, bg, bg, bg, bg, bg, bg, bg],
        [bg, ol, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, o2, ol, bg, bg, bg, bg, bg, bg, bg],
        [bg, ol, sk, sk, sk, sk, sc, sc, sk, sk, sk, sk, sk, sk, o2, i2, ol, bg, bg, bg, bg, bg, bg, bg],
        [bg, ol, sk, sk, sk, sk, pu, sc, sk, sk, sk, sk, sk, sk, o2, i2, ol, bg, bg, bg, bg, bg, bg, bg],
        [bg, ol, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, o2, ol, bg, bg, bg, bg, bg, bg, bg],
        [bg, ol, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, ol, bg, bg, bg, bg, bg, bg, bg],
        [bg, ol, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, o3, ol, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, ol, ol, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, o3, i3, ol, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, ol, ol, ol, ol, sk, sk, sk, sk, sk, sk, o3, i3, ol, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, bg, ol, sk, sk, sk, sk, sk, sk, sk, sk, o3, ol, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, al, ol, o5, sk, sk, sk, al, al, sk, sk, sk, ol, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, al, al, ol, i5, o5, sk, al, al, sk, sk, sk, sk, o4, ol, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, bg, ol, i5, o5, sk, sk, sk, sk, sk, sk, sk, o4, i4, ol, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, bg, ol, i5, o5, sk, sk, sk, sk, sk, sk, sk, sk, o4, o4, ol, ol, bg, bg, bg],
        [bg, bg, bg, bg, bg, bg, ol, o5, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, ol, bg, bg],
        [bg, bg, bg, bg, bg, bg, ol, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, ol, ol, ol, ol, bg, bg, bg],
        [bg, bg, bg, bg, bg, bg, ol, ol, ol, ol, ol, ol, al, al, ol, ol, ol, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, al, al, bg, bg, bg, bg, al, al, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, al, al, bg, bg, bg, bg, al, al, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg]
    ], dtype=np.uint8)

    # A cross breed of euoplocephalus & trex
    euoplorex = np.array([
        [bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, bg, hn, bg, bg, bg, hn, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, ol, ol, ol, ol, ol, hn, hn, ol, ol, ol, bg, bg, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, ol, ol, sk, sk, sk, sk, sk, hn, hn, o1, o1, o1, ol, bg, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, ol, sk, sk, sk, sk, sk, sk, sk, hn, hn, hn, sk, sk, sk, ol, s1, bg, bg, bg, bg, bg, bg],
        [bg, ol, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, o2, ol, s1, s1, bg, bg, bg, bg, bg],
        [bg, ol, sk, sk, sk, sk, sc, sc, sk, sk, sk, sk, sk, sk, o2, i2, ol, s1, bg, bg, bg, bg, bg, bg],
        [bg, ol, sk, sk, sk, sk, pu, sc, sk, sk, sk, sk, sk, sk, o2, i2, ol, bg, bg, bg, bg, bg, bg, bg],
        [bg, ol, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, o2, ol, s2, bg, bg, bg, bg, bg, bg],
        [bg, ol, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, ol, s2, s2, bg, bg, bg, bg, bg],
        [bg, ol, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, o3, ol, s2, bg, bg, bg, bg, bg, bg],
        [bg, bg, ol, ol, sk, sk, sk, sk, sk, sk, sk, sk, sk, sk, o3, i3, ol, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, ol, ol, ol, ol, sk, sk, sk, sk, sk, sk, o3, i3, ol, s3, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, bg, ol, sk, sk, sk, sk, sk, sk, sk, sk, o3, ol, s3, s3, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, al, ol, o5, sk, sk, sk, al, al, sk, sk, sk, ol, s3, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, al, al, ol, i5, o5, sk, al, al, sk, sk, sk, o4, ol, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, bg, ol, i5, o5, sk, sk, sk, sk, sk, o4, i4, ol, s4, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, bg, ol, i5, o5, sk, sk, sk, sk, sk, o4, i4, ol, s4, s4, bg, tl, tl, bg, bg],
        [bg, bg, bg, bg, bg, bg, ol, o5, sk, sk, sk, sk, sk, sk, sk, o4, ol, s4, bg, bg, tl, tl, bg, bg],
        [bg, bg, bg, bg, bg, bg, ol, sk, sk, sk, sk, sk, sk, sk, sk, sk, ol, bg, bg, tl, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, bg, ol, ol, ol, ol, ol, ol, al, al, ol, ol, ol, tl, tl, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, bg, al, al, bg, bg, bg, bg, al, al, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, al, al, al, bg, bg, bg, al, al, al, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg],
        [bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg, bg]
    ], dtype=np.uint8)


    '''----- Dyno type -----'''
    dyno_type = feed_dyno()

    if dyno_type > 444: # 55.5% chance of Euoplocephalus
        dyno_pixels = euoplocephalus
        count_dyno_type[0] += 1
        if has_mismatch_spikes: count_mismatch_spikes += 1
    elif dyno_type > 111: # 33.3% chance of T-Tex
        dyno_pixels = trex
        count_dyno_type[1] += 1
        if has_mismatch_dots: count_mismatch_dots += 1
    else: # 11.1 % chance of Euoplorex - A cross breed of Euoplocephalus & T-Tex
        dyno_pixels = euoplorex
        count_dyno_type[2] += 1
        if has_mismatch_spikes: count_mismatch_spikes += 1
        if has_mismatch_dots: count_mismatch_dots += 1



    '''----- Emotion -----'''
    emotion = feed_dyno() % 3 # 33% chance of each emotion

    if emotion == 0: # 33% chance of mad eyebrows
        eb_rows = [4, 5]
        eb_cols = [6, 5]
    elif emotion == 1: # 33% chance of happy eyebrows
        eb_rows = [4, 5]
        eb_cols = [7, 8]
    else: # 33% chance of neutral eyebrows
        eb_rows = [4, 4]
        eb_cols = [6, 7]

    count_emotion[emotion] += 1
    dyno_pixels[eb_rows, eb_cols] = eb

    ''' 
    NOTE: I developed the dyno image facing to the left
    but apparently every other NTF profile pic faces to the right
    so I use numpy to flip the pixels horizontally so dyno faces right
    '''
    dyno_pixels_flip = np.fliplr(dyno_pixels)
    
    # use PIL to create an image from the new array of pixels
    new_image = Image.fromarray(dyno_pixels_flip)
    new_image = new_image.resize(dimensions, resample=0)
    imgname = cwd + '/dyno_images/' + str(dyno_number) + '.png'
    new_image.save(imgname)


'''
Print out the results of the dyno creation
Displays counts and percentages of each dyno attribute to console
'''
print("-------------------------- DYNO RESULTS --------------------------")

print(f"\nARAMS & LEGS" + 
    f"\n\tGrey({count_al_color[0]}): {round( count_al_color[0]/dyno_count*100 )} %" + 
    f"\n\tGold({count_al_color[1]}): {round( count_al_color[1]/dyno_count*100 )} %" + 
    f"\n\tRed({count_al_color[2]}): {round( count_al_color[2]/dyno_count*100 )} %" + 
    f"\n\tWhite({count_al_color[3]}): {round( count_al_color[3]/dyno_count*100 )} %" + 
    f"\n\tBlack({count_al_color[4]}): {round( count_al_color[4]/dyno_count*100 )} %"
    )

print(f"\nDYNO TYPE" + 
    f"\n\tEuoplocephalus({count_dyno_type[0]}): {round( count_dyno_type[0]/dyno_count*100 )} %" + 
    f"\n\tT-Tex({count_dyno_type[1]}): {round( count_dyno_type[1]/dyno_count*100 )} %" + 
    f"\n\tEuoplorex({count_dyno_type[2]}): {round( count_dyno_type[2]/dyno_count*100 )} %"
    )

print(f"\nEYEBROW TYPE" + 
    f"\n\tMad({count_emotion[0]}): {round( count_emotion[0]/dyno_count*100 )} %" + 
    f"\n\tHappy({count_emotion[1]}): {round( count_emotion[1]/dyno_count*100 )} %" + 
    f"\n\tNeutral({count_emotion[2]}): {round( count_emotion[2]/dyno_count*100 )} %"
    )

print(f"\nNOCTURNAL({count_nocturnal}): {round( count_nocturnal/dyno_count*100 )} %")

print(f"\nEYE MUTATION({count_eye_mutation}): {round( count_eye_mutation/dyno_count*100 )} %")

print(f"\nMISMATCH SPIKES({count_mismatch_spikes}): {round( count_mismatch_spikes/dyno_count*100 )} %")

print(f"\nMISMATCH DOTS({count_mismatch_dots}): {round( count_mismatch_dots/dyno_count*100 )} %")
